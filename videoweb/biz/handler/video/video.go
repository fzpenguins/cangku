// Code generated by hertz generator.

package video

import (
	"context"
	"strconv"
	"time"
	"videoweb/response"
	"videoweb/service"

	"github.com/cloudwego/hertz/pkg/app"
	"github.com/cloudwego/hertz/pkg/protocol/consts"
	video "videoweb/biz/model/hertz/video"
)

// Publish .
// @router /video/publish [POST]
func Publish(ctx context.Context, c *app.RequestContext) {
	var err error
	var req video.VideoPublishReq
	err = c.BindAndValidate(&req)
	if err != nil {
		c.JSON(consts.StatusOK, response.BadResponse())
		return
	}

	resp, err := service.PublishVideo(ctx, c, &req)
	if err != nil {
		c.JSON(consts.StatusOK, response.BadResponse())
		return
	}
	c.JSON(consts.StatusOK, resp)
}

// List .
// @router /video/list [GET]
func List(ctx context.Context, c *app.RequestContext) {
	var err error
	var req video.VideoListReq
	err = c.BindAndValidate(&req)
	if err != nil {
		c.JSON(consts.StatusOK, response.BadResponse())
		return
	}

	resp, err := service.ListVideos(ctx, c, &req)
	if err != nil {
		c.JSON(consts.StatusOK, response.BadResponse())
		return
	}

	c.JSON(consts.StatusOK, resp)
}

// Popular .
// @router /video/popular [GET]
func Popular(ctx context.Context, c *app.RequestContext) {
	var err error
	var req video.VideoPopularReq
	err = c.BindAndValidate(&req)
	if err != nil {
		c.JSON(consts.StatusOK, response.BadResponse())
		return
	}

	resp, err := service.PopularRank(ctx, c, &req)
	if err != nil {
		c.JSON(consts.StatusOK, response.BadResponse())
		return
	}

	c.JSON(consts.StatusOK, resp)
}

// Search .
// @router /video/search [POST]
func Search(ctx context.Context, c *app.RequestContext) {
	var err error
	var req video.VideoSearchReq
	err = c.BindAndValidate(&req)
	if err != nil {
		c.JSON(consts.StatusOK, response.BadResponse())
		return
	}

	resp, err := service.SearchVideo(ctx, c, &req)
	if err != nil {
		c.JSON(consts.StatusOK, response.BadResponse())
		return
	}
	c.JSON(consts.StatusOK, resp)
}

// Feed .
// @router /video/feed [GET]
func Feed(ctx context.Context, c *app.RequestContext) {
	var err error
	var req video.VideoFeedReq
	err = c.BindAndValidate(&req)
	if err != nil {
		c.JSON(consts.StatusOK, response.BadResponse())
		return
	}
	if len(req.GetLatestTime()) == 0 {
		req.LatestTime = strconv.FormatInt(time.Now().Unix(), 10)
	}
	resp, err := service.FeedVideo(ctx, c, &req)

	c.JSON(consts.StatusOK, resp)
}
